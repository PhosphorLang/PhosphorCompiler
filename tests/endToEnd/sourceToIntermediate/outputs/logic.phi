function Logic~testNot (Int8): Int8
{
    introduce v#0
    take v#0 p#0
    introduce v#1
    move v#1 v#0
    not v#1
    give r#0 v#1
    return
}

function Logic~testAnd (Int8, Int8): Int8
{
    introduce v#2
    take v#2 p#0
    introduce v#3
    take v#3 p#1
    introduce v#4
    move v#4 v#2
    introduce v#5
    move v#5 v#3
    and v#4 v#5
    give r#0 v#4
    return
}

function Logic~testOr (Int8, Int8): Int8
{
    introduce v#6
    take v#6 p#0
    introduce v#7
    take v#7 p#1
    introduce v#8
    move v#8 v#6
    introduce v#9
    move v#9 v#7
    or v#8 v#9
    give r#0 v#8
    return
}

function Logic~testEqual (Native, Native): Int8
{
    introduce v#10
    take v#10 p#0
    introduce v#11
    take v#11 p#1
    introduce v#13
    move v#13 v#10
    introduce v#14
    move v#14 v#11
    compare v#13 v#14
    jumpIfEqual l#0
    introduce v#12
    move v#12 Int8(0)
    goto l#1
    l#0:
    move v#12 Int8(-1)
    l#1:
    give r#0 v#12
    return
}

function Logic~testNotEqual (Native, Native): Int8
{
    introduce v#15
    take v#15 p#0
    introduce v#16
    take v#16 p#1
    introduce v#18
    move v#18 v#15
    introduce v#19
    move v#19 v#16
    compare v#18 v#19
    jumpIfNotEqual l#2
    introduce v#17
    move v#17 Int8(0)
    goto l#3
    l#2:
    move v#17 Int8(-1)
    l#3:
    give r#0 v#17
    return
}

function Logic~testLess (Native, Native): Int8
{
    introduce v#20
    take v#20 p#0
    introduce v#21
    take v#21 p#1
    introduce v#23
    move v#23 v#20
    introduce v#24
    move v#24 v#21
    compare v#23 v#24
    jumpIfLess l#4
    introduce v#22
    move v#22 Int8(0)
    goto l#5
    l#4:
    move v#22 Int8(-1)
    l#5:
    give r#0 v#22
    return
}

function Logic~testGreater (Native, Native): Int8
{
    introduce v#25
    take v#25 p#0
    introduce v#26
    take v#26 p#1
    introduce v#28
    move v#28 v#25
    introduce v#29
    move v#29 v#26
    compare v#28 v#29
    jumpIfGreater l#6
    introduce v#27
    move v#27 Int8(0)
    goto l#7
    l#6:
    move v#27 Int8(-1)
    l#7:
    give r#0 v#27
    return
}

function Logic~main (): Void
{
    introduce v#30
    move v#30 Int8(-1)
    give p#0 v#30
    call Logic~testNot
    introduce v#31
    move v#31 Int8(-1)
    give p#0 v#31
    introduce v#32
    move v#32 Int8(0)
    give p#1 v#32
    call Logic~testAnd
    introduce v#33
    move v#33 Int8(-1)
    give p#0 v#33
    introduce v#34
    move v#34 Int8(0)
    give p#1 v#34
    call Logic~testOr
    introduce v#35
    move v#35 Native(1)
    give p#0 v#35
    introduce v#36
    move v#36 Native(2)
    give p#1 v#36
    call Logic~testEqual
    introduce v#37
    move v#37 Native(1)
    give p#0 v#37
    introduce v#38
    move v#38 Native(2)
    give p#1 v#38
    call Logic~testNotEqual
    introduce v#39
    move v#39 Native(1)
    give p#0 v#39
    introduce v#40
    move v#40 Native(2)
    give p#1 v#40
    call Logic~testLess
    introduce v#41
    move v#41 Native(1)
    give p#0 v#41
    introduce v#42
    move v#42 Native(2)
    give p#1 v#42
    call Logic~testGreater
    return
}
